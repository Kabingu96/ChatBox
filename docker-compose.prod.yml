version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: chatbox-db-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-chatbox}
      POSTGRES_USER: ${POSTGRES_USER:-chatbox}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-chatbox} -d ${POSTGRES_DB:-chatbox}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - chatbox-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: chatbox-backend-prod
    environment:
      PORT: 8080
      DATABASE_URL: postgres://${POSTGRES_USER:-chatbox}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-chatbox}?sslmode=require
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-https://yourdomain.com}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - chatbox-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_BASE: ${REACT_APP_API_BASE:-https://api.yourdomain.com}
        REACT_APP_WS_BASE: ${REACT_APP_WS_BASE:-wss://api.yourdomain.com}
    container_name: chatbox-frontend-prod
    ports:
      - "80:3000"
      - "443:3000"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - chatbox-network

volumes:
  postgres_data_prod:

networks:
  chatbox-network:
    driver: bridge